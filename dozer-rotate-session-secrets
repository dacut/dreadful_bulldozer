#!/usr/bin/env python2.7
from __future__ import absolute_import, print_function
from base64 import b64encode
from datetime import datetime, timedelta
import dozer.dao as dao
from getopt import getopt, GetoptError
import re
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sys import argv, exit, stderr, stdin

def generate_secret():
    with open("/dev/urandom", "rb") as fd:
        return fd.read(32)

def update_secret(session, secret_key):
    secret_key_base64 = b64encode(secret_key)
    secret = dao.SessionSecret(secret_key_base64=secret_key_base64,
                               valid_from_utc=datetime.utcnow())
    session.add(secret)
    session.flush()
    return

def expire_secrets(session, limit):
    expire_time = datetime.utcnow() + timedelta(seconds=limit)

    for secret in (session.query(dao.SessionSecret).
                   filter(dao.SessionSecret.accept_until_utc == None)):
        secret.accept_until_utc = expire_time
        session.add(secret)

    session.flush()
    return

def delete_invalid_secrets(session):
    for secret in (
        session.query(dao.SessionSecret).
        filter(dao.SessionSecret.accept_until_utc < datetime.utcnow())):
        session.delete(secret)

    session.flush()
    return

def time_limit_to_seconds(limit):
    m = re.search(r"(?P<numeric>[0-9]+(?:\.[0-9]+))\s*"
                  r"(?P<unit>d(ays?)?|h((rs?|ours?)?)|m(ins?|inutes?)?|"
                  r"s(ecs?|seconds?)?)",
                  limit)
    if m is None:
        raise ValueError("Invalid time interval %r" % limit)

    numeric = float(m.group("numeric"))
    unit = m.group("unit")
    if unit.startswith("d"):
        return numeric * 24 * 60 * 60
    elif unit.startswith("h"):
        return numeric * 60 * 60
    elif unit.startswith("m"):
        return numeric * 60
    else:
        return numeric
    
def main(args):
    expire_limit = 4 * 60 * 60     # 4 hours
    delete = True
    expire = True

    try:
        opts, args = getopt(args, "l:", ["limit=", "no-delete", "no-expire"])
    except GetoptError as e:
        print(e, fd=stderr)
        usage()
        return 1

    for opt, value in opts:
        if opt in ("-l", "--limit"):
            try:
                expire_limit = time_limit_to_seconds(value)
            except ValueError as e:
                print(e.args[0], file=stderr)
                usage()
                return 1
        elif opt in ("--no-delete",):
            delete = False
        elif opt in ("--no-expire",):
            expire = False

    if len(args) > 0:
        print("Unknown argument %s" % args[0], file=stderr)
        usage()
        return 1

    engine = create_engine("sqlite:///dozer.db")
    session = sessionmaker(bind=engine)()

    if expire:
        print("Expiring old session keys")
        expire_secrets(session, expire_limit)
    if delete:
        print("Deleting invalid session keys")
        delete_invalid_secrets(session)

    print("Updating session secret key")
    update_secret(session, generate_secret())

    session.commit()
    return 0

def usage(fd=stderr):
    print("""\
Usage: dozer-rotate-session-secrets [options]

Create a new session secret key.  Old session keys which do not have an
expiration date now receive an expiration date 4 hours into the future.
Old session keys which have an expiration date in the past are deleted.

Options:
    --limit <number>[d|day|h|hr|m|min|s|sec]
        Expire old sessions in the specified amount of time instead of
        the default value of 4 hours.

    --no-expire
        Do not set expiration dates on old keys.

    --no-delete
        Do not delete old keys.""", file=fd)
    return

if __name__ == "__main__":
    exit(main(argv[1:]))
