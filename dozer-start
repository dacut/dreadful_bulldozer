#!/usr/bin/env python2.7
from __future__ import absolute_import, print_function
from dozer.config import get_config, get_root, set_root
from getopt import getopt, GetoptError
from logging import basicConfig, getLogger, DEBUG
from os.path import abspath
from sys import argv, path as sys_path, stderr

def main(args):
    try:
        opts, args = getopt(args, "r:c:", ["root=", "config="])
    except GetoptError as e:
        print(str(e), file=stderr)
        usage()
        return 1

    config_filename = None

    for opt, value in opts:
        if opt in ("-r", "--root"):
            set_root(value)
        elif opt in ("-c", "--config"):
            config_filename = value

    if len(args) > 0:
        print("Unknown argument %s" % args[0], file=stderr)
        usage()
        return 1
    
    root = get_root()

    if "." not in sys_path and root not in sys_path:
        sys_path[:0] = [root]

    # Configure logging
    basicConfig(level=DEBUG, stream=stderr)

    start_dozer()
    return 0

def start_dozer():
    # Bring in application modules
    import cherrypy
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    from dozer.dbpool import ConnectionPool, SQLitePool
    from dozer.app import DreadfulBulldozer
    from dozer.jsonrpc import JSONRPC
    from dozer.session import UserSessionTool
    from dozer.transaction import TransactionTool

    # Load server configuration
    config = get_config()
    cherrypy.config.update(config)

    server_root = config["dozer"]["server_root"]
    database_url = config["dozer"]["database_url"]
    icon_set = config["dozer"]["icon_set"]

    # Set up CherryPy tools
    engine = create_engine(database_url)
    session_class = sessionmaker(bind=engine)
    cherrypy.tools.transaction = TransactionTool(session_class)
    cherrypy.tools.user_session = UserSessionTool()

    app = cherrypy.tree.mount(DreadfulBulldozer(server_root), "/", config)
    cherrypy.engine.start()
    cherrypy.engine.block()

if __name__ == "__main__":
    exit(main(argv[1:]))

##  Local variables:
##  mode: Python
##  tab-width: 8
##  indent-tabs-mode: nil
##  End:
##  vi: set expandtab tabstop=8
